import tkinter as tk
from tkinter import messagebox

# Function to check if a number can be placed in a given position
def is_safe(board, row, col, num):
    for x in range(9):
        if board[row][x] == num or board[x][col] == num:
            return False

    start_row, start_col = row - row % 3, col - col % 3
    for i in range(3):
        for j in range(3):
            if board[i + start_row][j + start_col] == num:
                return False
    return True

# Backtracking function to solve the Sudoku puzzle
def solve_sudoku(board):
    empty = find_empty_location(board)
    if not empty:
        return True
    row, col = empty

    for num in range(1, 10):
        if is_safe(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return True
            board[row][col] = 0

    return False

# Function to find an empty cell (represented by 0)
def find_empty_location(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

# Function to update the grid with the solved Sudoku
def update_grid(board):
    for i in range(9):
        for j in range(9):
            if cells[i][j].get() == "":  # Only update if the cell was empty
                cells[i][j].delete(0, tk.END)
                cells[i][j].insert(tk.END, str(board[i][j]))

# Function to get the current grid from the input and solve it
def solve():
    board = []
    for i in range(9):
        row = []
        for j in range(9):
            value = cells[i][j].get()
            if value.isdigit():
                row.append(int(value))
            else:
                row.append(0)
        board.append(row)

    if solve_sudoku(board):
        update_grid(board)
        messagebox.showinfo("Sudoku Solver", "Sudoku Solved!")
    else:
        messagebox.showinfo("Sudoku Solver", "No solution exists")

# Function to initialize the board with a preset Sudoku puzzle
def initialize_grid(preset_board):
    for i in range(9):
        for j in range(9):
            if preset_board[i][j] != 0:
                cells[i][j].insert(tk.END, str(preset_board[i][j]))
                cells[i][j].config(state='disabled')  # Disable editing for preset numbers

# Function to clear the grid
def clear_grid():
    for i in range(9):
        for j in range(9):
            cells[i][j].config(state='normal')  # Re-enable all cells
            cells[i][j].delete(0, tk.END)

# Create the GUI window
root = tk.Tk()
root.title("Sudoku Solver")

# Create a frame to hold the Sudoku grid, so we can center it
frame = tk.Frame(root)
frame.grid(padx=20, pady=20)  # Add padding to center the grid better

cells = [[None for _ in range(9)] for _ in range(9)]

# Create the 9x9 grid of Entry widgets inside the frame
for i in range(9):
    for j in range(9):
        cell = tk.Entry(frame, width=3, font=('Arial', 18), justify='center', bd=2)
        cell.grid(row=i, column=j, padx=5, pady=5)  # Add spacing between cells
        cells[i][j] = cell

# Preset Sudoku puzzle (0 represents empty cells)
preset_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Initialize the grid with the preset puzzle
initialize_grid(preset_board)

# Create a frame for the buttons, so they can be centered below the grid
button_frame = tk.Frame(root)
button_frame.grid(row=1, column=0, pady=10)

# Create "Solve" button
solve_button = tk.Button(button_frame, text="Solve", command=solve, font=('Arial', 14))
solve_button.grid(row=0, column=0, padx=20)

# Create "Clear" button
clear_button = tk.Button(button_frame, text="Clear", command=clear_grid, font=('Arial', 14))
clear_button.grid(row=0, column=1, padx=20)

# Start the GUI event loop
root.mainloop()
